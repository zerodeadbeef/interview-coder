{"version":3,"file":"preload.js","sources":["../electron/preload.ts"],"sourcesContent":["console.log(\"Preload script starting...\")\nimport { contextBridge, ipcRenderer } from \"electron\"\nconst { shell } = require(\"electron\")\n\n// Types for the exposed Electron API\ninterface ElectronAPI {\n  updateContentDimensions: (dimensions: {\n    width: number\n    height: number\n  }) => Promise<void>\n  clearStore: () => Promise<{ success: boolean; error?: string }>\n  getScreenshots: () => Promise<{\n    success: boolean\n    previews?: Array<{ path: string; preview: string }> | null\n    error?: string\n  }>\n  deleteScreenshot: (\n    path: string\n  ) => Promise<{ success: boolean; error?: string }>\n  onScreenshotTaken: (\n    callback: (data: { path: string; preview: string }) => void\n  ) => () => void\n  onResetView: (callback: () => void) => () => void\n  onSolutionStart: (callback: () => void) => () => void\n  onDebugStart: (callback: () => void) => () => void\n  onDebugSuccess: (callback: (data: any) => void) => () => void\n  onSolutionError: (callback: (error: string) => void) => () => void\n  onProcessingNoScreenshots: (callback: () => void) => () => void\n  onProblemExtracted: (callback: (data: any) => void) => () => void\n  onSolutionSuccess: (callback: (data: any) => void) => () => void\n  onDebugError: (callback: (error: string) => void) => () => void\n  openExternal: (url: string) => void\n  toggleMainWindow: () => Promise<{ success: boolean; error?: string }>\n  triggerScreenshot: () => Promise<{ success: boolean; error?: string }>\n  triggerProcessScreenshots: () => Promise<{ success: boolean; error?: string }>\n  triggerReset: () => Promise<{ success: boolean; error?: string }>\n  triggerMoveLeft: () => Promise<{ success: boolean; error?: string }>\n  triggerMoveRight: () => Promise<{ success: boolean; error?: string }>\n  triggerMoveUp: () => Promise<{ success: boolean; error?: string }>\n  triggerMoveDown: () => Promise<{ success: boolean; error?: string }>\n  startUpdate: () => Promise<{ success: boolean; error?: string }>\n  installUpdate: () => void\n  onUpdateAvailable: (callback: (info: any) => void) => () => void\n  onUpdateDownloaded: (callback: (info: any) => void) => () => void\n  getPlatform: () => string\n  testLocalAI: (config: any) => Promise<{ success: boolean; message?: string; error?: string }>\n  testLocalAIConnection: (config: any) => Promise<{ \n    success: boolean; \n    message?: string; \n    error?: string;\n    models?: any;\n    response?: any;\n  }>\n}\n\nexport const PROCESSING_EVENTS = {\n  //global states\n  NO_SCREENSHOTS: \"processing-no-screenshots\",\n\n  //states for generating the initial solution\n  INITIAL_START: \"initial-start\",\n  PROBLEM_EXTRACTED: \"problem-extracted\",\n  SOLUTION_SUCCESS: \"solution-success\",\n  INITIAL_SOLUTION_ERROR: \"solution-error\",\n  RESET: \"reset\",\n\n  //states for processing the debugging\n  DEBUG_START: \"debug-start\",\n  DEBUG_SUCCESS: \"debug-success\",\n  DEBUG_ERROR: \"debug-error\"\n} as const\n\n// At the top of the file\nconsole.log(\"Preload script is running\")\n\nconst electronAPI = {\n  updateContentDimensions: (dimensions: { width: number; height: number }) =>\n    ipcRenderer.invoke(\"update-content-dimensions\", dimensions),\n  clearStore: () => ipcRenderer.invoke(\"clear-store\"),\n  getScreenshots: () => ipcRenderer.invoke(\"get-screenshots\"),\n  deleteScreenshot: (path: string) =>\n    ipcRenderer.invoke(\"delete-screenshot\", path),\n  toggleMainWindow: async () => {\n    console.log(\"toggleMainWindow called from preload\")\n    try {\n      const result = await ipcRenderer.invoke(\"toggle-window\")\n      console.log(\"toggle-window result:\", result)\n      return result\n    } catch (error) {\n      console.error(\"Error in toggleMainWindow:\", error)\n      throw error\n    }\n  },\n  // Event listeners\n  onScreenshotTaken: (\n    callback: (data: { path: string; preview: string }) => void\n  ) => {\n    const subscription = (_: any, data: { path: string; preview: string }) =>\n      callback(data)\n    ipcRenderer.on(\"screenshot-taken\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"screenshot-taken\", subscription)\n    }\n  },\n  onResetView: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(\"reset-view\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"reset-view\", subscription)\n    }\n  },\n  onSolutionStart: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(PROCESSING_EVENTS.INITIAL_START, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.INITIAL_START, subscription)\n    }\n  },\n  onDebugStart: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(PROCESSING_EVENTS.DEBUG_START, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.DEBUG_START, subscription)\n    }\n  },\n  onDebugSuccess: (callback: (data: any) => void) => {\n    ipcRenderer.on(\"debug-success\", (_event, data) => callback(data))\n    return () => {\n      ipcRenderer.removeListener(\"debug-success\", (_event, data) =>\n        callback(data)\n      )\n    }\n  },\n  onDebugError: (callback: (error: string) => void) => {\n    const subscription = (_: any, error: string) => callback(error)\n    ipcRenderer.on(PROCESSING_EVENTS.DEBUG_ERROR, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.DEBUG_ERROR, subscription)\n    }\n  },\n  onSolutionError: (callback: (error: string) => void) => {\n    const subscription = (_: any, error: string) => callback(error)\n    ipcRenderer.on(PROCESSING_EVENTS.INITIAL_SOLUTION_ERROR, subscription)\n    return () => {\n      ipcRenderer.removeListener(\n        PROCESSING_EVENTS.INITIAL_SOLUTION_ERROR,\n        subscription\n      )\n    }\n  },\n  onProcessingNoScreenshots: (callback: () => void) => {\n    const subscription = () => callback()\n    ipcRenderer.on(PROCESSING_EVENTS.NO_SCREENSHOTS, subscription)\n    return () => {\n      ipcRenderer.removeListener(PROCESSING_EVENTS.NO_SCREENSHOTS, subscription)\n    }\n  },\n  onProblemExtracted: (callback: (data: any) => void) => {\n    const subscription = (_: any, data: any) => callback(data)\n    ipcRenderer.on(PROCESSING_EVENTS.PROBLEM_EXTRACTED, subscription)\n    return () => {\n      ipcRenderer.removeListener(\n        PROCESSING_EVENTS.PROBLEM_EXTRACTED,\n        subscription\n      )\n    }\n  },\n  onSolutionSuccess: (callback: (data: any) => void) => {\n    const subscription = (_: any, data: any) => callback(data)\n    ipcRenderer.on(PROCESSING_EVENTS.SOLUTION_SUCCESS, subscription)\n    return () => {\n      ipcRenderer.removeListener(\n        PROCESSING_EVENTS.SOLUTION_SUCCESS,\n        subscription\n      )\n    }\n  },\n  openExternal: (url: string) => shell.openExternal(url),\n  triggerScreenshot: () => ipcRenderer.invoke(\"trigger-screenshot\"),\n  triggerProcessScreenshots: () =>\n    ipcRenderer.invoke(\"trigger-process-screenshots\"),\n  triggerReset: () => ipcRenderer.invoke(\"trigger-reset\"),\n  triggerMoveLeft: () => ipcRenderer.invoke(\"trigger-move-left\"),\n  triggerMoveRight: () => ipcRenderer.invoke(\"trigger-move-right\"),\n  triggerMoveUp: () => ipcRenderer.invoke(\"trigger-move-up\"),\n  triggerMoveDown: () => ipcRenderer.invoke(\"trigger-move-down\"),\n  startUpdate: () => ipcRenderer.invoke(\"start-update\"),\n  installUpdate: () => ipcRenderer.invoke(\"install-update\"),\n  onUpdateAvailable: (callback: (info: any) => void) => {\n    const subscription = (_: any, info: any) => callback(info)\n    ipcRenderer.on(\"update-available\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"update-available\", subscription)\n    }\n  },\n  onUpdateDownloaded: (callback: (info: any) => void) => {\n    const subscription = (_: any, info: any) => callback(info)\n    ipcRenderer.on(\"update-downloaded\", subscription)\n    return () => {\n      ipcRenderer.removeListener(\"update-downloaded\", subscription)\n    }\n  },\n  getPlatform: () => process.platform,\n  testLocalAI: (config: any) => ipcRenderer.invoke(\"test-local-ai\", config),\n  testLocalAIConnection: (config: any) => ipcRenderer.invoke(\"test-local-ai-connection\", config)\n} as ElectronAPI\n\n// Before exposing the API\nconsole.log(\n  \"About to expose electronAPI with methods:\",\n  Object.keys(electronAPI)\n)\n\n// Expose the API\ncontextBridge.exposeInMainWorld(\"electronAPI\", electronAPI)\n\nconsole.log(\"electronAPI exposed to window\")\n\n// Add this focus restoration handler\nipcRenderer.on(\"restore-focus\", () => {\n  // Try to focus the active element if it exists\n  const activeElement = document.activeElement as HTMLElement\n  if (activeElement && typeof activeElement.focus === \"function\") {\n    activeElement.focus()\n  }\n})\n\n// Expose protected methods that allow the renderer process to use\n// the ipcRenderer without exposing the entire object\ncontextBridge.exposeInMainWorld(\"electron\", {\n  ipcRenderer: {\n    on: (channel: string, func: (...args: any[]) => void) => {\n      if (channel === \"auth-callback\") {\n        ipcRenderer.on(channel, (event, ...args) => func(...args))\n      }\n    },\n    removeListener: (channel: string, func: (...args: any[]) => void) => {\n      if (channel === \"auth-callback\") {\n        ipcRenderer.removeListener(channel, (event, ...args) => func(...args))\n      }\n    }\n  }\n})\n\n// Add local AI service to the window object\ncontextBridge.exposeInMainWorld(\"localAIService\", {\n  queryLocalAI: async (prompt: string, imageData?: string) => {\n    try {\n      console.log(\"Preload: queryLocalAI called with prompt length:\", prompt.length);\n      if (imageData) {\n        console.log(\"Preload: imageData provided with length:\", imageData.length);\n      }\n      \n      // Get the local AI config from localStorage\n      const configStr = localStorage.getItem('localAIConfig');\n      if (!configStr) {\n        console.error(\"Preload: No local AI configuration found\");\n        return { \n          content: '', \n          error: 'No local AI configuration found. Please configure your local AI settings.' \n        };\n      }\n      \n      const config = JSON.parse(configStr);\n      \n      // Validate the configuration\n      if (!config.isActive || !config.endpoint || !config.provider) {\n        console.error(\"Preload: Invalid or inactive AI configuration\");\n        return {\n          content: '',\n          error: 'Please select and activate an AI model in settings.'\n        };\n      }\n      \n      // Get the active model to ensure we're using the correct settings\n      const savedModelsStr = localStorage.getItem('savedAIModels');\n      if (savedModelsStr) {\n        const savedModels = JSON.parse(savedModelsStr);\n        const activeModel = savedModels.find((m: any) => m.isActive);\n        if (activeModel) {\n          // Update config with active model details\n          config.provider = activeModel.provider;\n          config.endpoint = activeModel.endpoint;\n          config.model = activeModel.id;\n          config.activeModel = activeModel.id;\n        }\n      }\n      \n      console.log(\"Preload: Using config provider:\", config.provider);\n      console.log(\"Preload: Using config endpoint:\", config.endpoint);\n      console.log(\"Preload: Using model:\", config.model);\n      \n      // Prepare the request based on the provider\n      let response;\n      \n      if (config.provider === 'ollama') {\n        // Format for Ollama\n        const messages = [\n          { role: 'system', content: config.systemPrompt || 'You are a helpful assistant.' }\n        ];\n        \n        // If image data is provided, include it in the prompt\n        if (imageData) {\n          messages.push({ \n            role: 'user', \n            content: `${prompt}\\n\\nHere is the image data: ${imageData}` \n          });\n        } else {\n          messages.push({ role: 'user', content: prompt });\n        }\n        \n        console.log(\"Preload: Sending request to Ollama\");\n        response = await fetch(config.endpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: config.model,\n            messages: messages,\n            stream: false\n          })\n        });\n        \n        const data = await response.json();\n        console.log(\"Preload: Received response from Ollama\");\n        \n        if (data.message) {\n          return { content: data.message.content };\n        } else {\n          console.error(\"Preload: Unexpected response format from Ollama\", data);\n          return { content: '', error: 'Unexpected response format from Ollama' };\n        }\n      } else if (config.provider === 'lmstudio') {\n        // Format for LM Studio (OpenAI compatible)\n        const messages = [\n          { role: 'system', content: config.systemPrompt || 'You are a helpful assistant.' }\n        ];\n        \n        // If image data is provided, include it in the prompt\n        if (imageData) {\n          // Check if the model is multimodal-capable\n          const isMultimodalModel = config.model && (\n            config.model.includes('llava') || \n            config.model.includes('bakllava') || \n            config.model.includes('vision') ||\n            config.model.includes('multimodal') ||\n            config.model.includes('clip')\n          );\n          \n          console.log(\"Preload: Processing screenshot with model:\", config.model);\n          console.log(\"Preload: Is model multimodal-capable:\", isMultimodalModel);\n          \n          if (isMultimodalModel) {\n            // Format for multimodal models using content array format\n            messages.push({\n              role: 'user',\n              content: [\n                { type: 'text', text: prompt },\n                { \n                  type: 'image_url', \n                  image_url: { \n                    url: `data:image/png;base64,${imageData}`,\n                    detail: 'high'\n                  }\n                }\n              ]\n            });\n            console.log(\"Preload: Using multimodal format for image data with model:\", config.model);\n          } else {\n            // Fallback for text-only models - warn the user\n            console.log(\"Preload: WARNING - Using text-only model for image processing. This will not work well.\");\n            console.log(\"Preload: Please select a multimodal model like LLaVA for better screenshot processing.\");\n            \n            messages.push({ \n              role: 'user', \n              content: `${prompt}\\n\\nNote: The image could not be processed properly because the selected model (${config.model}) is not multimodal-capable. Please use a vision-capable model like LLaVA instead.` \n            });\n          }\n        } else {\n          messages.push({ role: 'user', content: prompt });\n        }\n        \n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json'\n        };\n        \n        if (config.apiKey) {\n          headers['Authorization'] = `Bearer ${config.apiKey}`;\n        }\n        \n        console.log(\"Preload: Sending request to LM Studio at\", config.endpoint);\n        console.log(\"Preload: Using model:\", config.model);\n        \n        try {\n          response = await fetch(config.endpoint, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify({\n              model: config.model,\n              messages: messages,\n              temperature: 0.7,\n              max_tokens: 4000\n            })\n          });\n          \n          console.log(\"Preload: Received response from LM Studio with status:\", response.status);\n          \n          const data = await response.json();\n          console.log(\"Preload: Parsed response data\");\n          \n          if (data.choices && data.choices.length > 0) {\n            return { content: data.choices[0].message.content };\n          } else {\n            console.error(\"Preload: Unexpected response format from LM Studio\", data);\n            return { content: '', error: 'Unexpected response format from LM Studio' };\n          }\n        } catch (error) {\n          console.error(\"Preload: Error communicating with LM Studio:\", error);\n          \n          // Try alternative endpoint format\n          if (config.endpoint.includes('/v1/chat/completions')) {\n            const alternativeEndpoint = config.endpoint.replace('/v1/chat/completions', '/v1/completions');\n            console.log(\"Preload: Trying alternative endpoint:\", alternativeEndpoint);\n            \n            try {\n              // For completions endpoint, format is different\n              const completionsRequest = {\n                model: config.model,\n                prompt: `${config.systemPrompt || 'You are a helpful assistant.'}\\n\\nUser: ${prompt}\\n\\nAssistant:`,\n                temperature: 0.7,\n                max_tokens: 4000\n              };\n              \n              const altResponse = await fetch(alternativeEndpoint, {\n                method: 'POST',\n                headers: headers,\n                body: JSON.stringify(completionsRequest)\n              });\n              \n              console.log(\"Preload: Received response from alternative endpoint with status:\", altResponse.status);\n              \n              const altData = await altResponse.json();\n              \n              if (altData.choices && altData.choices.length > 0) {\n                return { content: altData.choices[0].text || altData.choices[0].content };\n              }\n            } catch (altError) {\n              console.error(\"Preload: Error with alternative endpoint:\", altError);\n            }\n          }\n          \n          throw error;\n        }\n      } else if (config.provider === 'custom') {\n        // Format for custom endpoint (try to be flexible)\n        const messages = [\n          { role: 'system', content: config.systemPrompt || 'You are a helpful assistant.' }\n        ];\n        \n        // If image data is provided, include it in the prompt\n        if (imageData) {\n          messages.push({ \n            role: 'user', \n            content: `${prompt}\\n\\nHere is the image data: ${imageData}` \n          });\n        } else {\n          messages.push({ role: 'user', content: prompt });\n        }\n        \n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json'\n        };\n        \n        if (config.apiKey) {\n          headers['Authorization'] = `Bearer ${config.apiKey}`;\n        }\n        \n        console.log(\"Preload: Sending request to custom endpoint\");\n        response = await fetch(config.endpoint, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            model: config.model,\n            messages: messages,\n            temperature: 0.7,\n            max_tokens: 4000\n          })\n        });\n        \n        const data = await response.json();\n        console.log(\"Preload: Received response from custom endpoint\");\n        \n        // Try to extract content from various possible response formats\n        if (data) {\n          if (data.choices && data.choices.length > 0 && data.choices[0].message) {\n            return { content: data.choices[0].message.content };\n          } else if (data.message && data.message.content) {\n            return { content: data.message.content };\n          } else if (data.content) {\n            return { content: data.content };\n          } else if (typeof data === 'string') {\n            return { content: data };\n          }\n        }\n        \n        console.error(\"Preload: Could not parse response from custom endpoint\", data);\n        return { content: '', error: 'Could not parse response from custom endpoint' };\n      } else {\n        console.error(\"Preload: Unsupported provider:\", config.provider);\n        return { content: '', error: `Unsupported provider: ${config.provider}` };\n      }\n    } catch (error) {\n      console.error(\"Preload: Error in queryLocalAI:\", error);\n      return {\n        content: '',\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n});\n"],"names":["ipcRenderer","contextBridge"],"mappings":"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"}